"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatMessage = exports.combineTypeScope = exports.formatScope = void 0;

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const formatScope = (scope = '') => scope ? `(${scope.trim()})` : scope.trim();

exports.formatScope = formatScope;

const combineTypeScope = (type, scope) => {
  let thisType = type;
  const thisScope = formatScope(scope); // add scope correctly if ':' is at the end

  if (thisScope.length > 0) {
    if (thisType.charAt(thisType.length - 1) === ':') {
      thisType = thisType.slice(0, thisType.length - 1);
    }

    thisType = `${thisType} ${thisScope}:`;
  } else if (thisType.charAt(thisType.length - 1) !== ':') {
    thisType = `${thisType}:`;
  }

  return thisType;
};

exports.combineTypeScope = combineTypeScope;

const formatMessage = (answers, argv) => {
  const combinedAnswers = _objectSpread({}, answers, argv);

  const type = combineTypeScope(combinedAnswers.type, combinedAnswers.scope);
  const formattedMessage = `${type} ${(combinedAnswers.message || '').trim()}`;
  const result = answers.body ? combinedAnswers.editor : formattedMessage;
  return result;
};

exports.formatMessage = formatMessage;