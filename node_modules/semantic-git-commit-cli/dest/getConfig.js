"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _jsonExtra = _interopRequireDefault(require("json-extra"));

var _lodash = _interopRequireDefault(require("lodash.merge"));

var _os = _interopRequireDefault(require("os"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const cwd = process.cwd();

const homedir = _os.default.homedir(); // eslint-disable-next-line global-require, import/no-dynamic-require


const safeRequire = jsPath => _fs.default.existsSync(jsPath) && require(jsPath);

const getConfig = altPath => {
  const pathString = altPath || _path.default.join(cwd, '.sgcrc');

  const localeConfigJS = safeRequire(_path.default.join(cwd, 'sgc.config.js'));

  const localeConfig = _jsonExtra.default.readToObjSync(pathString);

  const globalConfigJS = safeRequire(_path.default.join(homedir, 'sgc.config.js'));

  const globalConfig = _jsonExtra.default.readToObjSync(_path.default.join(homedir, '.sgcrc'));

  const packageConfig = _jsonExtra.default.readToObjSync(_path.default.join(cwd, 'package.json')).sgc;

  const sgcrcDefaultConfig = _jsonExtra.default.readToObjSync(_path.default.join(__dirname, '..', '.sgcrc'));

  const sgcrcTestDefaultConfig = _jsonExtra.default.readToObjSync(_path.default.join(__dirname, '..', '.sgcrc_default'));

  const sgcrcDefault = sgcrcDefaultConfig || sgcrcTestDefaultConfig; // priority order (1. highest priority):
  // 1. local config
  //   - 1. sgc.config.js
  //   - 2. .sgcrc
  //   - 3. (package.json).sgc
  // 2. global config
  // 3. default config
  //   - 1. from ../.sgcrc
  //   - 2. test case ../.sgcrc is renamed to ../.sgcrc_default

  const config = localeConfigJS || localeConfig || packageConfig || globalConfigJS || globalConfig || sgcrcDefault; // set defaults which are necessary

  const tempConfig = (0, _lodash.default)({}, sgcrcDefault, config); // do not merge types
  // so return them to their set default

  if (config.types) {
    tempConfig.types = config.types;
  }

  if (config.initialCommit) {
    tempConfig.initialCommit = config.initialCommit;
  } // next will remove "inherit" from the config


  const inherit = tempConfig.inherit,
        copiedConfig = _objectWithoutProperties(tempConfig, ["inherit"]);

  return copiedConfig;
};

var _default = getConfig;
exports.default = _default;