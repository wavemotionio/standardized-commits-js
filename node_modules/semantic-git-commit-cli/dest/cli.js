"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chalk = _interopRequireDefault(require("chalk"));

var _gitCommitCount = _interopRequireDefault(require("git-commit-count"));

var _isGitAdded = _interopRequireDefault(require("is-git-added"));

var _isGitRepository = _interopRequireDefault(require("is-git-repository"));

var _getConfig = _interopRequireDefault(require("./getConfig"));

var _package = _interopRequireDefault(require("../package.json"));

var _retryCommit = _interopRequireDefault(require("./helpers/retryCommit"));

var _sgcPrompt = _interopRequireDefault(require("./helpers/sgcPrompt"));

var _promptOrInitialCommit = _interopRequireDefault(require("./helpers/promptOrInitialCommit"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const cli =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(function* (argv = {}) {
    const config = (0, _getConfig.default)();

    if (argv.v) {
      console.log(`v${_package.default.version}`);
    } else if (!(0, _isGitRepository.default)()) {
      console.error('fatal: Not a git repository (or any of the parent directories): .git');
    } else if (!(0, _isGitAdded.default)()) {
      console.error(_chalk.default.red('Please', _chalk.default.bold('git add'), 'some files first before you commit.'));
    } else if (argv.r) {
      yield (0, _retryCommit.default)();
    } else if ((0, _gitCommitCount.default)() === 0 && typeof config.initialCommit === 'object' && config.initialCommit.isEnabled) {
      yield (0, _promptOrInitialCommit.default)();
    } else {
      yield (0, _sgcPrompt.default)(argv);
    }
  });

  return function cli() {
    return _ref.apply(this, arguments);
  };
}();

var _default = cli;
exports.default = _default;