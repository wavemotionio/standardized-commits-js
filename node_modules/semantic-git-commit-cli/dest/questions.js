"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initQuestion = exports.initMessage = exports.choices = exports.default = void 0;

var _chalk = _interopRequireDefault(require("chalk"));

var _ruleWarningMessages = _interopRequireDefault(require("./rules/ruleWarningMessages"));

var _formatters = require("./helpers/formatters");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const choices = config => {
  const choicesList = [];
  config.types.forEach(type => {
    const emoji = config.emoji && type.emoji ? `${type.emoji} ` : '';
    const configType = config.lowercaseTypes ? type.type.toLowerCase() : type.type;
    const description = type.description || '';
    const argKeys = type.argKeys || [];
    const isArray = Array.isArray(argKeys);

    if (!isArray) {
      console.error(_chalk.default.red('\nAn error occured. The value', _chalk.default.bold('argKeys'), 'of', _chalk.default.bold(type.type), 'must be an array'));
    }

    choicesList.push({
      value: emoji + configType,
      name: `${_chalk.default.bold(configType)} ${description}`,
      key: isArray ? argKeys : []
    });
  });
  return choicesList;
};

exports.choices = choices;

const initMessage = config => {
  let message = '';

  if (config.emoji && typeof config.initialCommit === 'object' && config.initialCommit.isEnabled) {
    message = `${config.initialCommit.emoji} ${config.initialCommit.message}`;
  } else {
    message = config.initialCommit.message;
  }

  return message;
};

exports.initMessage = initMessage;

const initQuestion = config => {
  const message = initMessage(config);
  return {
    type: 'confirm',
    name: 'initCommit',
    message: `Confirm as first commit message: "${message}"`,
    default: true
  };
};

exports.initQuestion = initQuestion;

const questions = (config, argv = {}) => {
  const modifiedArgv = argv;
  const choicesList = choices(config);
  const argChoice = choicesList.find(choice => choice.key.includes(modifiedArgv.t));

  if (argChoice) {
    modifiedArgv.type = argChoice.value;
  }

  const questionsList = [{
    type: 'list',
    name: 'type',
    when: () => !argChoice,
    message: 'Select the type of your commit:',
    choices: choicesList
  }, {
    type: 'input',
    name: 'scope',
    message: 'Enter your scope (no whitespaces allowed):',
    when: () => config.scope && !modifiedArgv.s,
    validate: input => input.match(/\s/) !== null ? 'No whitespaces allowed' : true
  }, {
    type: 'input',
    name: 'message',
    message: 'Enter your commit message:',
    when: () => !modifiedArgv.m,
    validate: (message, answers) => {
      if (message.length === 0) {
        return 'The commit message is not allowed to be empty';
      }

      const formattedMessage = (0, _formatters.formatMessage)(_objectSpread({}, answers, {
        message
      }), modifiedArgv);
      const warnings = (0, _ruleWarningMessages.default)(formattedMessage, config);
      return warnings || true;
    }
  }, {
    type: 'confirm',
    name: 'body',
    message: 'Do you want to add a body?',
    when: () => config.body,
    default: false
  }, {
    type: 'editor',
    name: 'editor',
    message: 'This will let you add more information',
    when: answers => answers.body,
    default: answers => {
      const formattedMessage = (0, _formatters.formatMessage)(answers, modifiedArgv);
      return `${formattedMessage}\n\n\n`;
    }
  }];
  return questionsList;
};

var _default2 = questions;
exports.default = _default2;